extend type Mutation {
  """
  ✨ Insert a single `Order` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  order_insert(
    """
    Data object to insert into the table.
    """
    data: Order_Data!
  ): Order_KeyOutput! @fdc_generated(from: "Order", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Pizza` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  pizza_insert(
    """
    Data object to insert into the table.
    """
    data: Pizza_Data!
  ): Pizza_KeyOutput! @fdc_generated(from: "Pizza", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Order` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  order_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Order_Data!]!
  ): [Order_KeyOutput!]! @fdc_generated(from: "Order", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Pizza` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  pizza_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Pizza_Data!]!
  ): [Pizza_KeyOutput!]! @fdc_generated(from: "Pizza", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Order` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Order`.
  """
  order_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Order_Data!
  ): Order_KeyOutput! @fdc_generated(from: "Order", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Pizza` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Pizza`.
  """
  pizza_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Pizza_Data!
  ): Pizza_KeyOutput! @fdc_generated(from: "Pizza", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Order` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Order`.
  """
  order_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Order_Data!]!
  ): [Order_KeyOutput!]! @fdc_generated(from: "Order", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Pizza` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Pizza`.
  """
  pizza_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Pizza_Data!]!
  ): [Pizza_KeyOutput!]! @fdc_generated(from: "Pizza", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Order` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Order` or `null` if not found.
  """
  order_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Order_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Order_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Order_Data!
  ): Order_KeyOutput @fdc_generated(from: "Order", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Pizza` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Pizza` or `null` if not found.
  """
  pizza_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Pizza_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Pizza_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Pizza_Data!
  ): Pizza_KeyOutput @fdc_generated(from: "Pizza", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Order` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  order_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Order_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Order_Data!
  ): Int! @fdc_generated(from: "Order", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Pizza` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  pizza_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Pizza_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Pizza_Data!
  ): Int! @fdc_generated(from: "Pizza", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Order` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  order_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Order_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Order_FirstRow
  ): Order_KeyOutput @fdc_generated(from: "Order", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Pizza` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  pizza_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: Pizza_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Pizza_FirstRow
  ): Pizza_KeyOutput @fdc_generated(from: "Pizza", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Order` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  order_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Order_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Order", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Pizza` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  pizza_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Pizza_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Pizza", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
